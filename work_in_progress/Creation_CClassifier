from sklearn import svm
from sklearn.utils import shuffle
import sklearn.model_selection as model_selection
from sklearn.multiclass import OneVsRestClassifier
from sklearn.metrics import accuracy_score
from sklearn.metrics import f1_score
from sklearn import preprocessing
from sklearn.svm import SVC
import pickle
from secml.ml.peval.metrics import CMetricAccuracy
from secml.ml.classifiers import CClassifierSVM
from secml.ml.kernels import CKernelRBF

random_state = 999
from secml.array import CArray
import numpy as np
import os

nbclass = 10
cible = []
sampleclass = 600

for i in range(1, nbclass + 1):
    for j in range(1, sampleclass + 1):
        cible.append([i])

#upload features 
X = np.load(os.path.join(r'C:\Users\servi\PycharmProjects\error work\ERROR', 'Features_Img.npy'))
y = np.array(cible)

nsamples, nx, ny = X.shape
d2_X = X.reshape((nsamples, nx * ny))

# data_cl = np.c_[d2_X, y]
# data_clm = shuffle(data_cl, random_state=0)
#
# d2_X = data_clm[:, :512]


# min_max_scaler = preprocessing.MinMaxScaler()
# d2_X = min_max_scaler.fit_transform(d2_X)
#
# y = data_clm[:, 512]
X_train, X_test, y_train, y_test = model_selection.train_test_split(X, y, train_size=0.90, test_size=0.10,
                                                                  random_state=20)
#trasform array to Carray
X_train = CArray(X_train)
X_test = CArray(X_test)
y_train = CArray(y_train)
y_test = CArray(y_test)

# from secml.ml.features import CNormalizerMinMax
# nmz = CNormalizerMinMax()
# X_train = nmz.fit_transform(X_train)
# X_test = nmz.transform(X_test)

# Metric to use for training and performance evaluation
metric = CMetricAccuracy()

# Creation of the multiclass classifier
from secml.ml.classifiers import CClassifierSVM
from secml.ml.classifiers.multiclass import CClassifierMulticlassOVA
from secml.ml.kernels import CKernelRBF

clf = CClassifierMulticlassOVA(CClassifierSVM, kernel=CKernelRBF(gamma=0.5), C=1)

# We can now fit the classifier
clf.fit(X_train, y_train)
print("Training of classifier complete!")

# Compute predictions on a test set
y_pred = clf.predict(X_test)

acc = metric.performance_score(y_true=y_test, y_pred=y_pred)

print("Accuracy on test set: {:.2%}".format(acc))

# import sklearn.external
import joblib
# from sklearn.externals import joblib

#joblib.dump(clf, 'ClassifierTrained_secml.pkl')
